# 참조: https://conansjh20.tistory.com/61

# pip install opencv-python #opencv 설치 안되있을시 이 라인 실행

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import PIL
%matplotlib inline

def show_img_compar(img_1, img_2 ):
    f, ax = plt.subplots(1, 2, figsize=(10,10)) #plt.subplots(행 개수, 열 개수), figsize(너비,높이)
    ax[0].imshow(img_1) #imshow: 이미지 보여주기
    ax[1].imshow(img_2)
    ax[0].axis('off') #불필요한 1행의 x축 없애기
    ax[1].axis('off')
    f.tight_layout() #tight_layout(): 그래프(이미지 사이)의 레이아웃 조절
    plt.show() #  plt.show():각각의 그래프 만들기

img = cv.imread("img_1.jpg") #imread(): 이미지 읽어주기
img = cv.cvtColor(img, cv.COLOR_BGR2RGB) # cvtColor:사진의 색깔을 바꿔주는 함수
img_2 = cv.imread("img_4.jpg")
img_2 = cv.cvtColor(img_2, cv.COLOR_BGR2RGB)
 
dim = (500, 300)   # 절대크기(너비,높이)
# resize image
img = cv.resize(img, dim, interpolation = cv.INTER_AREA) #cv.INTER_AREA: 영역보간법
img_2 = cv.resize(img_2, dim, interpolation = cv.INTER_AREA)
#이미지 크기 변환 함수: cv.resize(입력 이미지, 절대크기,보간법)
show_img_compar(img, img_2)

# pip install sklearn # 설치 안되있을시 이 라인 실행

from sklearn.cluster import KMeans

clt = KMeans(n_clusters=2) # 2개 클러스터로 모델 생성
clt.fit(img.reshape(-1,3)) # fit: 모델을 학습시켜 모델 객체에 저장하는 함수
#reshape(행,열): 행,열로 된 2차원 배열을 재구성하는 함수 

clt.labels_ 

clt.cluster_centers_

from collections import Counter

def palette_perc(k_cluster):
    width = 300
    palette = np.zeros((50, width, 3), np.uint8) #0으로 가득찬 행,열

    n_pixels = len(k_cluster.labels_) # 길이구하기(각 데이터가 어떤 클러스터에 속하는지 그 결과를 표현한다.)
    counter = Counter(k_cluster.labels_) # 클러스터 당 픽셀의 개수 구하기
    perc = {}
    for i in counter: # 이게 각 색의 비율을 표시해주는 것
        perc[i] = np.round(counter[i]/n_pixels, 2)
    perc = dict(sorted(perc.items()))

    #for logging purposes
    print(perc) #가장 많이 있는 색이 사진 내에 얼마나 비율을 차지하는지를 보여주는 듯
    print(k_cluster.cluster_centers_) #RGB에 해당하는 듯

    step = 0

    for idx, centers in enumerate(k_cluster.cluster_centers_): 
        palette[:, step:int(step + perc[idx]*width+1), :] = centers
        step += int(perc[idx]*width+1)

    return palette

clt_1 = clt.fit(img.reshape(-1, 3))
show_img_compar(img, palette_perc(clt_1))
 
clt_2 = clt.fit(img_2.reshape(-1, 3))
show_img_compar(img_2, palette_perc(clt_2))

